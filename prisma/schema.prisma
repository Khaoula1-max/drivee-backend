// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
enum UserRole {
  STUDENT
  SCHOOL
  ADMIN
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  email         String        @unique
  password      String
  phone         String?
  dateOfBirth   DateTime?
  address       String?
  role          UserRole
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  offres        Offre[]       @relation("UserOffres")
  reservations  Reservation[] @relation("UserReservations")
  verifications Verification[]
  reviews       Review[]
  schoolReservations Reservation[] @relation("SchoolReservations")
}

model Offre {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  schoolId      String        @db.ObjectId
  title         String
  description   String
  price         Float
  durationHours Int
  startDate     DateTime
  endDate       DateTime
  school        User          @relation("UserOffres", fields: [schoolId], references: [id])
  reservations  Reservation[]
  reviews       Review[]
  locationId    String        @db.ObjectId
  location      Location      @relation(fields: [locationId], references: [id])
}

model Reservation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId       String   @db.ObjectId
  schoolId        String   @db.ObjectId
  offreId         String   @db.ObjectId
  reservationDate DateTime @default(now())
  startDate       DateTime
  status          String   // e.g., "pending", "confirmed", "canceled"
  paymentStatus   String   // e.g., "paid", "unpaid"
  student         User     @relation("UserReservations", fields: [studentId], references: [id])
  school          User     @relation("SchoolReservations", fields: [schoolId], references: [id])
  offre           Offre    @relation(fields: [offreId], references: [id])
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  schoolName String
  proof      String   // URL or path to the image or PDF
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  offreId   String   @db.ObjectId
  review    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  offre     Offre    @relation(fields: [offreId], references: [id])
}

model Location {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  address String
  city    String
  country String
  offres  Offre[]
}
model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  amount      Float    // Montant du paiement
  paymentDate DateTime @default(now()) // Date du paiement
  status      String   // Statut du paiement (ex: "completed", "pending", "failed")
  method      String   // Méthode de paiement (ex: "credit_card", "paypal", etc.)
  createdAt   DateTime @default(now())
 
}